<?php


/**
 * @file
 * General functions and hook implementations.
 *
 * Zip codes pulled from http://www.nycbynatives.com/nyc_info/new_york_city_zip_codes.php
 *
 */
/**
 * Implements hook_menu().
 */
function fastlane_menu() {
  $items = array();
  $items['payeezy'] = array(
    'title' => 'Payeezy Gateway Post',
    'description' => 'Payeezy POST.',
    'page callback' => 'fastlane_payeezy_post_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['payment/%/%'] = array(
    'title' => 'Payeezy Payment Form',
    'description' => 'Creates form for posting reservations to Payeezy Gateway',
    'page callback' => 'fastlane_payeezy_form_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback function for Payeezy to send back confirmation of payment.
 */
function fastlane_payeezy_post_callback() {
  $content = t('you have arrived the payeezy way');
  $content .= t('Tame the query string!');

  return $content;
}

/**
 * A simple page callback.
 *
 * Page callbacks are required to return the entire page. The content
 * is then usually output via a call to theme('page'), where the theme system
 * will then surround the content in the appropriate blocks, navigation, and
 * styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 */

/**
 * Menu callback function for Payeezy Form page.
 */
function fastlane_payeezy_form_callback() {

  $my_webform_nid = arg(1);
  $my_sid = arg(2);

  $node = node_load($my_webform_nid);
  $nodes = array($node->nid => $node);
  webform_node_load($nodes, array('webform'));

  $components = $nodes[$node->nid]->webform['components'];
  $data = webform_menu_submission_load($my_sid, $my_webform_nid)->data;
  //dpm($components = $nodes[$node->nid]->webform['components'], '$components');
  //dpm($data = webform_menu_submission_load($my_sid,$my_webform_nid)->data, '$data');

  // Set easy to remember vars from data array.
  $customer_id = $data[55][0];
  $first_name = $data[2][0];
  $last_name = $data[3][0];
  $email = $data[1][0];
  $phone_number = $data[9][0];
  $address = $data[11][0] . $data[12][0];
  $city = $data[13][0];
  $state = $data[32][0];
  $zip = $data[15][0];
  $country = 'United States';

  // $rental_total = $data[46][0];
  $daily_rental_fee = '250.00';
  $sub_total = $data[50][0];
  $tax_total = $data[49][0];
  $grand_total = $data[51][0];
  $delivery_fee = $data[58][0];
  $delivery_fee_display = $data[48][0];
  //dpm($delivery_fee, '$delivery_fee');
  $tax_amount_display = $data[49][0];

  $bike_id = $my_webform_nid;
  $length_of_rental = $data[45][0];
  $motorcycle = $data[37][0];
  $description = 'motorcycle rental';
  $duration = $data[57][0];

  $motorcycle_line_item = $bike_id . '<|>' . $motorcycle . '<|>' .   $motorcycle . ' ' . $description . '<|>' . $duration  . '<|>' . $daily_rental_fee . '<|>YES';

  $delivery_line_item = '1<|>Delivery fee<|>' .  $delivery_fee_display . '<|>1<|>' . $delivery_fee . '<|>YES';

  $tax_line_item = '2<|>NJ Tax<|>New Jersey tax 7%<|>1<|>' . $tax_total . '<|>YES';

  // generate invoice number 2016-01-03 40-1
  $invoice_number = date('Y-m-d') . ' ' . $my_sid . '-' . $customer_id ;


  // fields required for payeezy gateway
  // LIVE
  $x_login = "WSP-FASTL-AzuKKABdhg"; // Take from Payment Page ID in Payment Pages interface
  $transaction_key = "Xl~6o4RNFSEcsp4WZ8p7"; // Take from Payment Pages configuration interface

  // set to FALSE for REAL transactions
  $x_test_request = FALSE;
  //$x_test_request = TRUE;
  // LIVE

  // DEV - comment to use LIVE
  // $x_login = "HCO-FREEL-525"; // Take from Payment Page ID in Payment Pages interface
  // $transaction_key = "Ibow1_b7G52nAoEyKtHn"; // Take from Payment Pages configuration interface
  // DEV

  $x_amount = $grand_total;
  // $x_amount = $_POST["x_amount"];

  // Needs to agree with the currency of the payment page.
  $x_currency_code = "USD";
  srand(time()); // initialize random generator for x_fp_sequence
  $x_fp_sequence = rand(1000, 100000) + 123456;
  $x_fp_timestamp = time(); // Needs to be in UTC. Make sure webserver produces UTC.

  // The values that contribute to x_fp_hash
  $hmac_data = $x_login . "^" . $x_fp_sequence . "^" . $x_fp_timestamp . "^" . $x_amount . "^" . $x_currency_code;
  $x_fp_hash = hash_hmac('MD5', $hmac_data, $transaction_key);

  $content = '<div class="progress" style="width: 60%">
  <div class="progress-bar progress-bar-info active progress-bar-striped" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">Processing Please Wait...
  </div>
</div>';

  // Required fields.
  // LIVE.
  $content .= '<form action="https://globalgatewaye4.firstdata.com/pay" method="POST" name="myForm" id="myForm">';

  // DEV
  // $content .= '<form action="https://demo.globalgatewaye4.firstdata.com/pay" method="POST" name="myForm" id="myForm">';

  $content .= '<div class="form-group">';
  $content .= '<input class="form-control" name="x_login" value="' . $x_login . '" type="hidden">';
  $content .= '<input class="form-control" name="x_amount" value="' . $x_amount . '" type="hidden">';
  $content .= '<input class="form-control" name="x_fp_sequence" value="' . $x_fp_sequence . '" type="hidden">';
  $content .= '<input class="form-control" name="x_fp_timestamp" value="' . $x_fp_timestamp . '" type="hidden">';
  $content .= '<input class="form-control" name="x_fp_hash" value="' . $x_fp_hash . '" size="50" type="hidden">';
  $content .= '<input class="form-control" name="x_currency_code" value="' . $x_currency_code . '" type="hidden">';
  $content .= '<input class="form-control" type="hidden" name="x_show_form" value="PAYMENT_FORM"/>';

  // Fastlane fields.
  $content .= '<input class="form-control" type="hidden" name="x_logo_url" value="https://fastlanemotorcyclerentals.com/files/files/logo/logo.svg"/>';

  $content .= '<input class="form-control" type="hidden" name="x_invoice_num" value="' . $invoice_number . '"/>';

  $content .= '<input class="form-control" type="hidden" name="x_line_item" value="' . $motorcycle_line_item . '"/>';

  $content .= '<input class="form-control" type="hidden" name="x_line_item" value="' . $delivery_line_item . '"/>';

  $content .= '<input class="form-control" type="hidden" name="x_line_item" value="' . $tax_line_item . '"/>';

  $content .= '<input class="form-control" type="hidden" name="x_first_name" value="' . $first_name . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_last_name" value="' . $last_name . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_address" value="' . $address . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_city" value="' . $city . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_state" value="' . $state . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_zip" value="' . $zip . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_country" value="' . $country . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_phone" value="' . $phone_number . '"/>';
  $content .= '<input class="form-control" type="hidden" name="x_email" value="' . $email . '"/>';

  $content .= '</div>';
  $content .= '<button type="submit" class="btn btn-success">Continue</button>';

  // Create parameters input in html.
  foreach ($_POST as $a => $b) {
    $content .= "<input type='text' name='" . htmlentities($a) . "' value='" . htmlentities($b) . "'>";
  }

  $content .= '</form>';

  //$content .= '<script type="text/javascript">document.myForm.submit();</script>';

  return $content;

}


/**
 * Implements hook_views_api().
 */
function fastlane_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_alter().
 */
function fastlane_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'availability_calendar_booking_formlet_form') {


  } // $form_id == 'availability_calendar_booking_formlet_form')

  if ($form_id == 'webform_client_form_8') {

    //dpm($form['submitted'], '$form submitted');

    /*****************************************************************************
    *  Webform overrides
    *  Form requires that user is logged in
    *  If logged in, but entity_id isn't set, then redirect to motorcyles page
    *  Set values for markup fields
    *  Calculate delivery distance
    *  Calculate final cost
   *****************************************************************************/

    // create array of query string
    $query_parameters = drupal_get_query_parameters();

    if (isset($query_parameters['entity_id'])) {

      $nid = $query_parameters['entity_id']; // $nid
      $delivery_time = array();

      // Calculate delivery distance based on user geolocation and location of bike

      // load $user data;
      global $user;
      $user_fields = user_load($user->uid);

      // If for some reason the user isn't logged then redirect to motorcycles pages
      if ($user_fields->uid != 0) {

        $customer_id = $user_fields->uid;
        $email = $user_fields->mail;
        $first_name = $user_fields->field_address['und'][0]['first_name'];
        $last_name = $user_fields->field_address['und'][0]['last_name'];
        $phone_number = $user_fields->field_phone_number['und'][0]['value'];
        $address_1 = $user_fields->field_address['und'][0]['thoroughfare']; // street
        $address_2 = $user_fields->field_address['und'][0]['premise']; // address 2
        $city = $user_fields->field_address['und'][0]['locality']; // city
        $state = $user_fields->field_address['und'][0]['administrative_area']; // state
        $zip_code = $user_fields->field_address['und'][0]['postal_code']; // zipcode
        // $zip_code = '10103'; // zipcode test if in NYC
        $geolocation = $user_fields->field_geofield['und'][0]['geom']; // geofield (POINT (-104.803022838.8879924)

        // get proximity of user from resource, set value and display text
        $view_name = 'distance_from_user';
        $display_id = 'default';
        $delivery_distance = trim(strip_tags(views_embed_view($view_name, $display_id, $nid)));
        $delivery_distance_display = $delivery_distance . ' miles';

        if(isset($query_parameters['delivery_time'])) {
          $delivery_time = $query_parameters['delivery_time'];
        }
        else {
          $delivery_time = '0900';
        }
        //$delivery_time = $query_parameters['delivery_time'];
        // convert military time standard time
        $delivery_time = date("g:i a", strtotime($delivery_time));

        $duration = $query_parameters['duration'];

        //$duration = ($query_parameters['duration'] - 1); // when choosing day vs over-night the duration is inflated by 1

       if ($duration > 1) {
        $duration_display = t($duration . ' days');
       }
       else {
        $duration_display = t($duration . ' day');
       }


      // dynamic values
      $form['submitted']['rental_details']['deliver_pickup_time']['#default_value'] = $delivery_time;

      // $form['submitted']['duration']['#default_value'] = $duration;

     // contact fieldset
      $form['submitted']['contact']['first_name']['#default_value'] = $first_name;
      $form['submitted']['contact']['last_name']['#default_value'] = $last_name;
      $form['submitted']['contact']['email']['#default_value'] = $email;
      $form['submitted']['contact']['phone_number']['#default_value'] = $phone_number;

      // delivery_address fieldset
      $form['submitted']['delivery_address']['address_1']['#default_value'] = $address_1;
      $form['submitted']['delivery_address']['address_2']['#default_value'] = $address_2;
      $form['submitted']['delivery_address']['city']['#default_value'] = $city;
      $form['submitted']['delivery_address']['state']['#default_value'] = $state;
      $form['submitted']['delivery_address']['zip_code']['#default_value'] = $zip_code;


        /*
          calculate the delivery fee.
          $35 Within NYC
          Free <= 25 miles
          $25 < 25 and 50 miles
          Call for quote greater than 50 miles
        */

        // set defaults
        // $delivery_distance = $form['delivery_distance']['#default_value'];
        $delivery_fee = '0';
        $delivery_fee_display = t('');

        $nyc_zipcodes = '10001,10002,10003,10004,10005,10006,10007,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10044,10045,10048,10055,10060,10069,10090,10095,10098,10099,10103,10104,10105,10106,10107,10110,10111,10112,10115,10118,10119,10120,10121,10122,10123,10128,10151,10152,10153,10154,10155,10158,10161,10162,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10199,10270,10271,10278,10279,10280,10281,10282,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10314,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,11004,11101,11102,11103,11104,11105,11106,11109,11201,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11241,11242,11243,11249,11252,11256,11351,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11377,11378,11379,11385,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11426,11427,11428,11429,11430,11432,11433,11434,11435,11436,11691,11692,11693,11694,11697,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,11201,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11241,11242,11243,11249,11252,11256,10001,10002,10003,10004,10005,10006,10007,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10044,10045,10048,10055,10060,10069,10090,10095,10098,10099,10103,10104,10105,10106,10107,10110,10111,10112,10115,10118,10119,10120,10121,10122,10123,10128,10151,10152,10153,10154,10155,10158,10161,10162,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10199,10270,10271,10278,10279,10280,10281,10282,11101,11102,11103,11004,11104,11105,11106,11109,11351,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11377,11378,11379,11385,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11426,11427,11428,11429,11430,11432,11433,11434,11435,11436,11691,11692,11693,11694,11697,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10314';


       // If it's a NYC zipcode, $35 charge
        if (stristr($nyc_zipcodes, $zip_code)) {
          $delivery_fee = 0;
          $delivery_fee_display = t('Free delivery/pickup from location of your choice in New Jersey');
          $delivery_fee_flag = FALSE;
        }

        elseif ($delivery_distance < 25) {
          $delivery_fee = 0;
          $delivery_fee_display = t('Free delivery/pickup');
          $delivery_fee_flag = FALSE;
        }

        elseif (($delivery_distance > 25) && ($delivery_distance <= 50)) {
          $delivery_fee = '50';
          $delivery_fee_display = t('$50 delivery/pickup fee within 25-50 miles');
          $delivery_fee_flag = FALSE;
        }

        else {
          $delivery_fee = 0;
          $delivery_fee_display = t('We will contact you regarding the delivery fee');
          $delivery_fee_flag = TRUE;
        }

        /*
          calculate rental fee, delivery fee, tax and total amount
          $250 per 24 hours X $duration
          $total_rental = $duration*250
          NJ tax rate 7.0%
          $tax=($salary*07)/100;
          $total_amount = ($total_rental+$tax);
        */

        $rental_rate = 250;
        $rental_rate_display = number_format($rental_rate,2);
        $total_rental = ($duration*$rental_rate);
        $total_rental_display = number_format($total_rental,2);
        $taxable_total = ($total_rental+$delivery_fee);
        $taxable_total_display = number_format($taxable_total,2);
        $tax = ($taxable_total*07)/100;
        $tax_display = number_format($tax,2);
        $total_amount = ($taxable_total+$tax);
        $total_amount_display = number_format($total_amount,2);


        // set payment field values
        $form['submitted']['rates_fees']['delivery_distance']['#default_value'] = $delivery_distance_display;
        $form['submitted']['rates_fees']['delivery_fee']['#default_value'] = $delivery_fee_display;

        $form['submitted']['rates_fees']['rental_rate']['#default_value'] = $rental_rate_display;
        $form['submitted']['rates_fees']['duration']['#default_value'] = $duration_display;
        $form['submitted']['rates_fees']['total_rental']['#default_value'] = $total_rental_display;

        $form['submitted']['rates_fees']['subtotal']['#default_value'] = $taxable_total_display;
        $form['submitted']['rates_fees']['tax']['#default_value'] = $tax_display;
        $form['submitted']['rates_fees']['total_cost']['#default_value'] = $total_amount_display;

        // private fields
        $form['submitted']['private_fields']['customer_id']['#default_value'] = $customer_id;
        //$form['submitted']['private_fields']['cid']['#default_value'] = $customer_id;
        $form['submitted']['private_fields']['duration']['#default_value'] = $duration;
        $form['submitted']['private_fields']['df_amount']['#default_value'] = $delivery_fee;

      }

    }

    else {

      drupal_goto('motorcycles');

    }


  } // $form_id == 'webform_client_form_8')

} // function fastlane_form_alter(&$form, &$form_state, $form_id)


/**
 * Define callbacks that can be used as select list options.
 *
 * When users create a select component, they may select a pre-built list of
 * certain options. Webform core provides a few of these lists such as the
 * United States, countries of the world, and days of the week. This hook
 * provides additional lists that may be utilized.
 *
 * @see webform_options_example()
 * @see hook_webform_select_options_info_alter()
 *
 * @return
 *   An array of callbacks that can be used for select list options. This array
 *   should be keyed by the "name" of the pre-defined list. The values should
 *   be an array with the following additional keys:
 *     - title: The translated title for this list.
 *     - options callback: The name of the function that will return the list.
 *     - options arguments: Any additional arguments to send to the callback.
 *     - file: Optional. The file containing the options callback, relative to
 *       the module root.
 */
function fastlane_webform_select_options_info() {
  $items = array();
  // $start_hour = 0;
  // $end_hour = 0;

  $items['available_times'] = array(
    'title' => t('Delivery times'),
    'options callback' => 'available_times',
  );
  //   'options arguments' => array(
  //     'start_hour' => t($start_hour),
  //     'end_hour' => t($end_hour),
  //     // 'start_hour' => t($cleanup_hours),
  //   ),
  // );
    //dpm($items, '$items');
  return $items;
}

/**
 * Option list containing the days of the week.
 */
// function available_times($component, $flat, $arguments) {
function available_times($component, $flat) {

  // times available for delivery/pickup
  $delivery_hours = array(
    '0900' => t('9:00am'),
    '1000' => t('10:00am'),
    '1100' => t('11:00am'),
    '1200' => t('12:00pm'),
    '1300' => t('1:00pm'),
    '1400' => t('2:00pm'),
    '1500' => t('3:00pm'),
    '1600' => t('4:00pm'),
    '1700' => t('5:00pm'),
    '1800' => t('6:00pm'),
    '1900' => t('7:00pm'),
    '2000' => t('8:00pm'),
    '2100' => t('9:00pm'),
    '2200' => t('10:00pm'),
  );

  $query_parameters = drupal_get_query_parameters();
  if (isset($query_parameters['cid'])) {

    $cid = $query_parameters['cid'];

    $deliver_date = $query_parameters['from_iso'];
    $pickup_date = $query_parameters['to_iso'];

    // dpm($deliver_date, 'before conversion $deliver_date');
    // dpm($pickup_date, 'before conversion $pickup_date');

    // convert string to date and remove a day or add a day
    //$deliver_date = date('Y-m-d', strtotime('-1 day', strtotime($deliver_date)));
    $pickup_date = date('Y-m-d', strtotime('+1 day', strtotime($pickup_date)));

    // dpm($deliver_date, 'after conversion $deliver_date');
    // dpm($pickup_date, 'after conversion $pickup_date');

    $previous_time = db_select('fastlane_dp_times', 'dt')
      ->fields('dt')
      ->condition('cid', $cid,'=')
      //->condition('deliver_date', $deliver_date,'=')
      //->condition('deliver_date', $pickup_date,'=')
      ->condition('pickup_date', $deliver_date,'=')
      ->execute()
      ->fetchAssoc();

    $next_time = db_select('fastlane_dp_times', 'dt')
      ->fields('dt')
      ->condition('cid', $cid,'=')
      // ->condition('pickup_date', $pickup_date,'=')
      //->condition('pickup_date', $deliver_date,'=')
      ->condition('deliver_date', $pickup_date,'=')
      ->execute()
      ->fetchAssoc();

      // dpm($previous_time, '$previous_time');
      // dpm($next_time, '$next_time');

    if ($previous_time['dp_time'] > 0 ) {
      $start_hour = $previous_time['dp_time'];
    }
    else {
      $start_hour = '0000';
    }

    if ($next_time['dp_time'] > 0 ) {
      $end_hour = $next_time['dp_time'];
    }
    else {
      $end_hour = '2400';
    }

    $cleanup_hours = '0200'; // Need  2 hours between deliveries

    $start_hour = $start_hour + $cleanup_hours;
    $start_hour = str_pad($start_hour,4, '0', STR_PAD_LEFT);

    $end_hour = $end_hour - $cleanup_hours;
    $end_hour = str_pad($end_hour,4, '0', STR_PAD_LEFT);

    // echo '$before loop - start_hour = ' . $start_hour . '<br>';
    // echo '$before loop - $endhour = ' . $end_hour . '<br><br>';

    foreach ($delivery_hours as $key => $value) {
      // echo '$key = ' . $key . '<br>';
      // echo '$value = ' . $value . '<br>';
      // echo '$start_hour = ' . $start_hour . '<br>';
      // echo '$end_hour = ' . $end_hour . '<br><br>';
      // Remove hours before the start time
      if ($start_hour > $key) {
        unset($delivery_hours[$key]);
      }
      // Remove hours after the end time
      if ($end_hour < $key) {
        unset($delivery_hours[$key]);
      }
    }

    return $delivery_hours;

  }

  else {
    return $delivery_hours;
  }

}
/**
 * Option list containing the hours available for a rental on deliver/pickup
 * time based on deliver date and pickup date.
 */
// function available_times($component, $flat, $arguments) {
// function fastlane_open_hours() {
//   $available_hours = array(
//     '0900' => t('9:00am'),
//     '1000' => t('10:00am'),
//     '1100' => t('11:00am'),
//     '1200' => t('12:00pm'),
//     '1300' => t('1:00pm'),
//     '1400' => t('2:00pm'),
//     '1500' => t('3:00pm'),
//     '1600' => t('4:00pm'),
//     '1700' => t('5:00pm'),
//     '1800' => t('6:00pm'),
//     '1900' => t('7:00pm'),
//     '2000' => t('8:00pm'),
//     '2100' => t('9:00pm'),
//     '2200' => t('10:00pm'),
//   );
//
//   return $available_hours;
// }

// function fastlane_available_times() {
//
//   $available_hours = array(
//     '0900' => t('9:00am'),
//     '1000' => t('10:00am'),
//     '1100' => t('11:00am'),
//     '1200' => t('12:00pm'),
//     '1300' => t('1:00pm'),
//     '1400' => t('2:00pm'),
//     '1500' => t('3:00pm'),
//     '1600' => t('4:00pm'),
//     '1700' => t('5:00pm'),
//     '1800' => t('6:00pm'),
//     '1900' => t('7:00pm'),
//     '2000' => t('8:00pm'),
//     '2100' => t('9:00pm'),
//     '2200' => t('10:00pm'),
//   );
//
//   if (isset($query_parameters['entity_id'])) {
//
//
//   //available_times($component, $flat)
//
//   $query_parameters = drupal_get_query_parameters();
//
//   $deliver_date = $query_parameters['from_iso'];
//   $pickup_date = $query_parameters['to_iso'];
//
//   // convert string to date and remove a day or add a day
//   $deliver_date = date('Y-m-d', strtotime('-1 day', strtotime($deliver_date)));
//   $pickup_date = date('Y-m-d', strtotime('+1 day', strtotime($pickup_date)));
//
//   $cid = $query_parameters['cid'];
//
//   $previous_time = db_select('fastlane_dp_times', 'dt')
//     ->fields('dt')
//     ->condition('cid', $cid,'=')
//     ->condition('deliver_date', $deliver_date,'=')
//     ->execute()
//     ->fetchAssoc();
//
//   $next_time = db_select('fastlane_dp_times', 'dt')
//     ->fields('dt')
//     ->condition('cid', $cid,'=')
//     ->condition('pickup_date', $pickup_date,'=')
//     ->execute()
//     ->fetchAssoc();
//
//   if ($previous_time['dp_time'] > 0 ) {
//     $start_hour = $previous_time['dp_time'];
//   }
//   else {
//     $start_hour = 0;
//   }
//
//   if ($next_time['dp_time'] > 0 ) {
//     $end_hour = $next_time['dp_time'];
//   }
//   else {
//     $end_hour = 0;
//   }
//
//   $cleanup_hours = sprintf('%04d', '0200'); // Need  2 hours between deliveries
//   // $start_hour = sprintf('%04d',   $start_hour);
//   // $end_hour = sprintf('%04d', '$end_hour');
//   $start_hour = $start_hour + $cleanup_hours;
//   $end_hour = sprintf('%04d', $end_hour - $cleanup_hours);
//
//   foreach ($delivery_hours as $key => $value) {
//     //echo  $start_hour . "start hour = " . $key . ", value=" . $value;
//     //echo "<br>";
//     // Remove hours before the start time
//     if ($start_hour > $key) {
//       unset($delivery_hours[$key]);
//     }
//     // Remove hours after the end time
//     if ($end_hour < $key) {
//       unset($delivery_hours[$value]);
//     }
//   }
//
//   return $delivery_hours;
//
// }

//$select_list = available_times($start_hour, $end_hour);


/**
 * @file
 * The Remove RON Module.
 *
 * Removes the /node path and page from your website, forever. https://www.youtube.com/watch?v=H-Q7b-vHY3Q
 *
 */

/**
 * Implementation of hook_menu_alter().
 */
function fastlane_menu_alter(&$items) {
    unset($items['node']);
}
